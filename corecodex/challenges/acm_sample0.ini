[challenge]
title: The 3n + 1 Algorthm
difficulty: 2
language: python
points: 15

[description]
shortdesc: Print the maxmum cycle length of the 3n+1 Algorithm.
longdesc:
	<p>Problems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive). In this problem you will be analyzing a property of an algorithm whose classification is not known for all possible inputs.</p>
	<p>Consider the following algorithm:</p>
	<pre>
	1.    input n
	2.    print n
	3.    if n = 1 then STOP
	4.        if n is odd then n = 3n + 1
	5.        else n = n/2
	6.    GOTO 2
	</pre>
	<p>Given the input 22, the following sequence of numbers will be printed 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1</p>
	<p>It is conjectured that the algorithm above will terminate (when a 1 is printed) for any integral input value. Despite the simplicity of the algorithm, it is unknown whether this conjecture is true. It has been verified, however, for all integers n such that 0 < n < 1,000,000 (and, in fact, for many more numbers than this.)</p>
	<p>Given an input n, it is possible to determine the number of numbers printed (including the 1). For a given n this is called the cycle-length of n. In the example above, the cycle length of 22 is 16.</p>
	<p>For any two numbers i and j you are to determine the maximum cycle length over all numbers between i and j.</p>

input:
	<p>The input will be integers i and j. Both integers will be less than 1,000,000 and greater than 0.</p>
	<p>You should process all pairs of integers and for each pair determine the maximum cycle length over all integers between and including i and j.</p>
	<p>You can assume that no operation overflows a 32-bit integer.</p>

output:
	<p>Print the cycle length for integers between and including i and j.</p>

[code]
starter:
	|def algorithm(i, j):
	|	print "0"

[sample]
code:
	algorithm(1, 10)
	algorithm(100, 200)
	algorithm(201, 210)
	algorithm(900, 1000)

input:
output:
	20
	125
	89
	174

[test]
code:
	algorithm(1, 10)
	algorithm(100, 200)
	algorithm(201, 210)
	algorithm(900, 1000)
	algorithm(1, 1)
	algorithm(100, 101)
	algorithm(1000, 1100)

input:
output:
	20
	125
	89
	174
	1
	26
	169
