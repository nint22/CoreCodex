[challenge]
title: Parentheses Balance Redux
difficulty: 1
language: python
points: 5

[description]
shortdesc: Count the number of three-types of balanced parentheses in a given string.
longdesc:
	Given a string, find the number of balanced parentheses-pairs. Parentheses includes the "()" characters,
	as well as the "[]" block-pair and the "{}" curley-brace pairs. These pairs may be "embedded",
	meaning that the string "(())" contains two parentheses pairs, as well as "()()" also contains two
	pairs. These pairs must be balanced, meaning any starting character "(" must be paired with ")". The string
	"(()" only has one balance, because the middle parentheses is left open without a closing pair, since the
	left-most parethesis is the opening symbol. Pairs must match the paired starting symbol, so that "(]" is not
	a pair but "{}[]()" counts as three pairs as well as "{[()]}".

input:
	string parentheses_string - a string containing only the "(", "{", "[", "]", "}", and ")" characters

output:
	print "[number of times a parentheses pair is found in the given string]

[code]
starter:
	|def main(parentheses_string):
	|	print "Something..." # Write your code here...

[sample]
code:
	main("(){}[]")
	main("({[]})")
	main("[(]{)}")

input:
output:
	3
	3
	2

[test]
code:
	main("()[]{}")
	main("(({}))")
	main("()}{()")
	main("{{{")
	main(")}]")
	main("")
	main("{()((()(([][]{}())))[])}")

input:
output:
	3
	3
	2
	0
	0
	0
	12
